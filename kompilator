kompilator

	1. nacpeme zdrojovej kod do kompilatoru, ted mozna vyplivne .exe
	2. data do .exe a dostaneme vystup

nebo pouze interpretace
	.bash + data dame do interpretu, a dostaneme vystup, dela se to v jednom kroku vsechno
nebo hybridni rezim
.	.java -> kompilator -> .obj coz je kod, kteremu rozumi interpret -> interpret + data-> vystup
	.obj je stejny pro vic jazyku, treba python

kompilace je rychlejsi na spousteni, pomalejsi vyvoj, horsi prenositelnost programu, drivejsi odhaleni chyb, kdyz to chci poslat, tak poslu .exe
interpretace odhali chyby pozdeji, treba deleni nulu az pri deleni, pracuje s daty, takze rekne detailnejsi informace o chybe, odhali chyby, ktere kompilator neodhali, nevyhoda je skryti kodu, musim poslat zdrojak, aby to mohl zpustit

.c -> preprocesor, zpracuje to neco, odstrani komentare, nahradi to promenne, -> kompilator -> vyprodukuje assembly = jazyk strojovych instrukci -> asesmbler, program, ktery to cte->
-> .obj - ma pouze relativni pamet -> Linker, najde vsechny knihovny-> .obj s relativnima odkazama -> Loader - nahraje to do pocitace
Loader je soucast OS, hlida jestli nedelame to, co nemame, treba mazem pamet

Kompilator

-frontend(analyticka cast)
	zkousime zdrojovy kod
	1. lexikalni analyza = tokenizace
		prectu si retezec a udelam si z nej token
			<id, 'a'><op, =>, <const, 0>...
			odhalim spatne symboly
		vystup je stream tokeny
	2. syntakticka analyza
		vystupem je AST stromova struktura 
			odhalim spatnou syntaxi a=; neprojde, 4=a taky ne
	3. semanticka analyza
		vystup je zase AST
		kontrola typu, nemuzu do integeru ukladat string
		muzeme neco pretypovat, 1==True, bude bud 1==1 nebo True == True
	4. generator mezikodu
		vystup je neprekvapive mezikod
	specificky pro jazyk
	5. optimalizace mezikodu
		muze ale nemusi byt
-backend(synteticka cast)
	specificky pro platformu
	1. optimalizace zavisle na platforme
	2. generator kodu
		.asm
	3. optimalizace kodu

a jsme na konci
+ tabulka symbolu, mezi frontendem a backendem, 

  id |  name | type | value |
   1      b	int	0



kompilatory se lisi hlavne v optimalizacich
